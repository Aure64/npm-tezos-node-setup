#!/usr/bin/env node

const axios = require('axios');
const fs = require('fs');
const inquirer = require('inquirer');
const { execSync, exec } = require('child_process');
const os = require('os');
const path = require('path');
const cliProgress = require('cli-progress');

const SNAPSHOT_BASE_URL = 'https://snapshots.eu.tzinit.org';
const SERVICE_FILE_PATH = '/etc/systemd/system/octez-node.service';
const DATA_DIR = path.join(os.homedir(), '.tezos-node-setup');

async function getOS() {
    const platform = os.platform();
    let distro = '';
    let version = '';

    if (platform === 'linux') {
        try {
            distro = execSync('lsb_release -cs').toString().trim().toLowerCase();
            version = execSync('lsb_release -r -s').toString().trim();
            console.log(`Distro: ${distro}, Version: ${version}`);
        } catch (e) {
            console.error('Impossible de détecter la distribution Linux.');
            process.exit(1);
        }
    } else {
        console.error('Système d\'exploitation non supporté.');
        process.exit(1);
    }

    return { platform, distro, version };
}

function isPackageInstalled(packageName) {
    try {
        const output = execSync(`dpkg -l | grep ${packageName}`).toString();
        const match = output.match(/^ii\s+(\S+)\s+(\S+)/);
        if (match) {
            return { name: match[1], version: match[2] };
        }
    } catch (e) {
        return null;
    }
    return null;
}

async function downloadFile(url, destination) {
    const writer = fs.createWriteStream(destination);
    const { data, headers } = await axios({
        url,
        method: 'GET',
        responseType: 'stream'
    });

    const totalLength = headers['content-length'];
    const progressBar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);

    progressBar.start(parseInt(totalLength), 0);

    data.on('data', (chunk) => progressBar.increment(chunk.length));
    data.pipe(writer);

    return new Promise((resolve, reject) => {
        writer.on('finish', () => {
            progressBar.stop();
            resolve();
        });

        writer.on('error', (err) => {
            progressBar.stop();
            reject(err);
        });
    });
}

async function installTezosTools(distro) {
    console.log(`Téléchargement et installation de octez-client et octez-node pour ${distro}...`);

    const packageUrls = {
        client: `https://gitlab.com/tezos/tezos/-/package_files/138319721/download`,
        node: `https://gitlab.com/tezos/tezos/-/package_files/138319417/download`
    };

    const installedClient = isPackageInstalled('octez-client');
    const installedNode = isPackageInstalled('octez-node');

    if (!installedClient || installedClient.version !== '20.2') {
        console.log(`Téléchargement de octez-client...`);
        await downloadFile(packageUrls.client, '/tmp/octez-client.deb');
        console.log(`Installation de octez-client...`);
        execSync(`sudo dpkg -i /tmp/octez-client.deb`);
    } else {
        console.log(`octez-client déjà installé. Version : ${installedClient.version}`);
    }

    if (!installedNode || installedNode.version !== '20.2') {
        console.log(`Téléchargement de octez-node...`);
        await downloadFile(packageUrls.node, '/tmp/octez-node.deb');
        console.log(`Installation de octez-node...`);
        execSync(`sudo dpkg -i /tmp/octez-node.deb`);
    } else {
        console.log(`octez-node déjà installé. Version : ${installedNode.version}`);
    }
}

async function getSnapshotSizes(network) {
    const modes = ['full', 'rolling'];
    const sizes = {};

    for (const mode of modes) {
        const snapshotUrl = `${SNAPSHOT_BASE_URL}/${network}/${mode}`;
        try {
            const response = await axios.head(snapshotUrl);
            const sizeInBytes = response.headers['content-length'];
            const sizeInGB = (sizeInBytes / (1024 ** 3)).toFixed(2);
            sizes[mode] = sizeInGB;
        } catch (error) {
            console.error(`Erreur lors de la récupération de la taille du snapshot pour le mode ${mode}:`, error.message);
            sizes[mode] = 'unknown';
        }
    }

    return sizes;
}

async function promptUser(network, snapshotSizes) {
    const choices = Object.keys(snapshotSizes).map(mode => ({
        name: `${mode} (${snapshotSizes[mode]} GB)`,
        value: mode
    }));

    const answers = await inquirer.prompt([
        {
            type: 'list',
            name: 'mode',
            message: 'Choisissez le mode:',
            choices
        }
    ]);

    return answers;
}

function findAvailablePort(startPort = 8732, endPort = 8734) {
    for (let port = startPort; port <= endPort; port++) {
        try {
            execSync(`lsof -i:${port}`);
        } catch (e) {
            return port;
        }
    }
    console.error(`No available ports found in range ${startPort}-${endPort}`);
    process.exit(1);
}

async function importSnapshot(network, mode) {
    const snapshotUrl = `${SNAPSHOT_BASE_URL}/${network}/${mode}`;
    console.log(`Téléchargement du snapshot depuis ${snapshotUrl}...`);
    await downloadFile(snapshotUrl, '/tmp/snapshot');
    console.log('Importation du snapshot...');
    execSync(`octez-node snapshot import /tmp/snapshot --data-dir ${DATA_DIR}`);
}

function cleanNodeData(dataDir) {
    console.log('Nettoyage des données du nœud...');
    const dirsToDelete = ['context', 'daily_logs', 'lock', 'store'];
    dirsToDelete.forEach(dir => {
        const dirPath = path.join(dataDir, dir);
        if (fs.existsSync(dirPath)) {
            fs.rmSync(dirPath, { recursive: true });
        }
    });
}

function configureServiceUnit() {
    console.log('Configuration du fichier service unit systemd...');
    const user = os.userInfo().username;
    const serviceUnitContent = `
[Unit]
Description=Tezos Node Service
Documentation=http://tezos.gitlab.io/
Wants=network-online.target
After=network-online.target

[Service]
User=${user}
Group=${user}
WorkingDirectory=${DATA_DIR}
ExecStart=/usr/bin/octez-node run --rpc-addr 127.0.0.1:8732 --data-dir ${DATA_DIR}
Restart=on-failure

[Install]
WantedBy=multi-user.target
RequiredBy=octez-baker.service octez-accuser.service
  `;

    // Utilisation de sudo pour écrire le fichier de service systemd
    const tmpServiceFilePath = '/tmp/octez-node.service';
    fs.writeFileSync(tmpServiceFilePath, serviceUnitContent);
    execSync(`sudo mv ${tmpServiceFilePath} ${SERVICE_FILE_PATH}`);
    console.log('Fichier service unit configuré.');
    restartService();
}

function restartService() {
    console.log('Redémarrage du service systemd...');
    execSync('sudo systemctl daemon-reload');
    execSync('sudo systemctl enable octez-node');
    execSync('sudo systemctl restart octez-node');
}

function waitForIdentityFile() {
    return new Promise((resolve, reject) => {
        const checkInterval = 2000; // 2 seconds
        const maxRetries = 15; // 30 seconds total
        let attempts = 0;

        const interval = setInterval(() => {
            if (fs.existsSync(path.join(DATA_DIR, 'identity.json'))) {
                clearInterval(interval);
                resolve();
            } else {
                attempts++;
                if (attempts >= maxRetries) {
                    clearInterval(interval);
                    reject(new Error('Timeout waiting for identity.json file.'));
                }
            }
        }, checkInterval);
    });
}

async function main() {
    const { distro } = await getOS();

    await installTezosTools(distro);

    const networks = ['mainnet', 'ghostnet'];
    const { network } = await inquirer.prompt([
        {
            type: 'list',
            name: 'network',
            message: 'Choisissez le réseau:',
            choices: networks
        }
    ]);

    const snapshotSizes = await getSnapshotSizes(network);
    const { mode } = await promptUser(network, snapshotSizes);

    const port = findAvailablePort();
    console.log(`Port disponible trouvé: ${port}`);

    console.log(`Initialisation du noeud...`);
    execSync(`octez-node config init --data-dir ${DATA_DIR} --network=${network} --history-mode=${mode}`);
    console.log(`Lancement du noeud pour création de l'identité...`);
    const nodeProcess = exec(`octez-node run --data-dir ${DATA_DIR}`);

    try {
        await waitForIdentityFile();
        console.log('Identité créée, arrêt du noeud...');
        nodeProcess.kill('SIGINT');
    } catch (error) {
        console.error(error.message);
        process.exit(1);
    }

    console.log('Arrêt du noeud...');
    execSync(`sudo systemctl stop octez-node`);

    try {
        cleanNodeData(DATA_DIR);
        await importSnapshot(network, mode);
    } catch (error) {
        console.error('Erreur lors de l\'importation du snapshot:', error);
        process.exit(1);
    }

    configureServiceUnit();
    console.log('Installation terminée.');
}

main();
